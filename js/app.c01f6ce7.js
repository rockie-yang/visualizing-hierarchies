!function(e){function n(n){for(var a,i,s=n[0],c=n[1],h=n[2],l=0,u=[];l<s.length;l++)i=s[l],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&u.push(o[i][0]),o[i]=0;for(a in c)Object.prototype.hasOwnProperty.call(c,a)&&(e[a]=c[a]);for(d&&d(n);u.length;)u.shift()();return r.push.apply(r,h||[]),t()}function t(){for(var e,n=0;n<r.length;n++){for(var t=r[n],a=!0,i=1;i<t.length;i++){var c=t[i];0!==o[c]&&(a=!1)}a&&(r.splice(n--,1),e=s(s.s=t[0]))}return e}var a={},i={app:0},o={app:0},r=[];function s(n){if(a[n])return a[n].exports;var t=a[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.e=function(e){var n=[];i[e]?n.push(i[e]):0!==i[e]&&{HomeView:1,ImageSlider:1,MarkdownViewer:1,"chunk-0dc90800":1,"chunk-00d5bec1":1,"chunk-16790762":1,"chunk-20a270f4":1,"chunk-4b831d0f":1,"chunk-084408eb":1,"chunk-3affc264":1,"chunk-56521f0e":1,"chunk-5b7ec9d3":1,EnronEmails:1,ForceDemo:1,"chunk-3c63c192":1,"chunk-bb7b04b8":1,About:1,Examples:1,Intro:1,"chunk-697ca00e":1,"chunk-7417bc98":1,"chunk-79485d7c":1,"chunk-be6f7732":1,"chunk-c1547a56":1}[e]&&n.push(i[e]=new Promise((function(n,t){for(var a="css/"+({HomeView:"HomeView",ImageSlider:"ImageSlider",MarkdownViewer:"MarkdownViewer",ReportTree:"ReportTree",EnronEmails:"EnronEmails",ForceDemo:"ForceDemo",About:"About",Examples:"Examples",Intro:"Intro"}[e]||e)+"."+{HomeView:"99eda1e3",ImageSlider:"e6e3e8e8","chunk-2d0a349e":"31d6cfe0","chunk-2d0b2cc8":"31d6cfe0","chunk-2d0b5e08":"31d6cfe0","chunk-2d0cbe78":"31d6cfe0","chunk-2d0d5c32":"31d6cfe0","chunk-2d0e1782":"31d6cfe0","chunk-2d0e4a6d":"31d6cfe0","chunk-2d0e68f3":"31d6cfe0","chunk-2d0f005d":"31d6cfe0","chunk-2d229248":"31d6cfe0",MarkdownViewer:"a700908a","chunk-0dc90800":"f52cf8b0",ReportTree:"31d6cfe0","chunk-00d5bec1":"c7aca77c","chunk-16790762":"ef0df63a","chunk-20a270f4":"dd75fc18","chunk-2d0c7ac4":"31d6cfe0","chunk-2d0c7ef2":"31d6cfe0","chunk-2d0c8dc6":"31d6cfe0","chunk-2d0d603d":"31d6cfe0","chunk-2d20ec52":"31d6cfe0","chunk-2d20ec5c":"31d6cfe0","chunk-2d222d55":"31d6cfe0","chunk-2d225233":"31d6cfe0","chunk-4b831d0f":"b2382d81","chunk-084408eb":"8c61c5c4","chunk-2d0bddf6":"31d6cfe0","chunk-3affc264":"62676ca1","chunk-56521f0e":"7b573847","chunk-5b7ec9d3":"381184c4","chunk-67fabd50":"31d6cfe0",EnronEmails:"6c846470",ForceDemo:"9f589862","chunk-3c63c192":"e77dbdde","chunk-bb7b04b8":"baf03d67",About:"ebebb7cb",Examples:"ba50a2c6",Intro:"da572e3a","chunk-697ca00e":"45ba5826","chunk-7417bc98":"93cd10c4","chunk-79485d7c":"2d1863e0","chunk-be6f7732":"c7171e99","chunk-c1547a56":"08032c53"}[e]+".css",o=s.p+a,r=document.getElementsByTagName("link"),c=0;c<r.length;c++){var h=r[c],l=h.getAttribute("data-href")||h.getAttribute("href");if("stylesheet"===h.rel&&(l===a||l===o))return n()}var d=document.getElementsByTagName("style");for(c=0;c<d.length;c++)if((l=(h=d[c]).getAttribute("data-href"))===a||l===o)return n();var u=document.createElement("link");u.rel="stylesheet",u.type="text/css",u.onload=n,u.onerror=function(n){var a=n&&n.target&&n.target.src||o,r=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");r.code="CSS_CHUNK_LOAD_FAILED",r.request=a,delete i[e],u.parentNode.removeChild(u),t(r)},u.href=o,document.getElementsByTagName("head")[0].appendChild(u)})).then((function(){i[e]=0})));var t=o[e];if(0!==t)if(t)n.push(t[2]);else{var a=new Promise((function(n,a){t=o[e]=[n,a]}));n.push(t[2]=a);var r,c=document.createElement("script");c.charset="utf-8",c.timeout=120,s.nc&&c.setAttribute("nonce",s.nc),c.src=function(e){return s.p+"js/"+({HomeView:"HomeView",ImageSlider:"ImageSlider",MarkdownViewer:"MarkdownViewer",ReportTree:"ReportTree",EnronEmails:"EnronEmails",ForceDemo:"ForceDemo",About:"About",Examples:"Examples",Intro:"Intro"}[e]||e)+"."+{HomeView:"b8c8745b",ImageSlider:"aa6439d4","chunk-2d0a349e":"7df60294","chunk-2d0b2cc8":"98cc648b","chunk-2d0b5e08":"e7b2daa4","chunk-2d0cbe78":"0c46f199","chunk-2d0d5c32":"b5f6a3b7","chunk-2d0e1782":"dc2e5832","chunk-2d0e4a6d":"0cad9ffc","chunk-2d0e68f3":"b62184c7","chunk-2d0f005d":"5b713e90","chunk-2d229248":"0ef05eef",MarkdownViewer:"86265107","chunk-0dc90800":"43e6ed67",ReportTree:"86bb3f81","chunk-00d5bec1":"88742535","chunk-16790762":"57252905","chunk-20a270f4":"e0471053","chunk-2d0c7ac4":"87db47e8","chunk-2d0c7ef2":"19cb304d","chunk-2d0c8dc6":"124c2a92","chunk-2d0d603d":"1e0aa75b","chunk-2d20ec52":"c0134ae0","chunk-2d20ec5c":"8f5285ad","chunk-2d222d55":"aaec4491","chunk-2d225233":"f473ac5f","chunk-4b831d0f":"3e7bd5f9","chunk-084408eb":"05801387","chunk-2d0bddf6":"c387803a","chunk-3affc264":"096d5084","chunk-56521f0e":"237f4d7e","chunk-5b7ec9d3":"53a0be0a","chunk-67fabd50":"6104785a",EnronEmails:"37a91c61",ForceDemo:"cab266f3","chunk-3c63c192":"8910862d","chunk-bb7b04b8":"d4b8c855",About:"72aac6e6",Examples:"474dda6d",Intro:"ee02e794","chunk-697ca00e":"169d6b1e","chunk-7417bc98":"8656807b","chunk-79485d7c":"31c01419","chunk-be6f7732":"c04e9a9c","chunk-c1547a56":"d8a6ffcd"}[e]+".js"}(e);var h=new Error;r=function(n){c.onerror=c.onload=null,clearTimeout(l);var t=o[e];if(0!==t){if(t){var a=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;h.message="Loading chunk "+e+" failed.\n("+a+": "+i+")",h.name="ChunkLoadError",h.type=a,h.request=i,t[1](h)}o[e]=void 0}};var l=setTimeout((function(){r({type:"timeout",target:c})}),12e4);c.onerror=c.onload=r,document.head.appendChild(c)}return Promise.all(n)},s.m=e,s.c=a,s.d=function(e,n,t){s.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,n){if(1&n&&(e=s(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)s.d(t,a,function(n){return e[n]}.bind(null,a));return t},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="/",s.oe=function(e){throw e};var c=window.webpackJsonp=window.webpackJsonp||[],h=c.push.bind(c);c.push=n,c=c.slice();for(var l=0;l<c.length;l++)n(c[l]);var d=h;r.push([0,"chunk-vendors"]),t()}({0:function(e,n,t){e.exports=t("56d7")},"56d7":function(e,n,t){"use strict";t.r(n);var a={};t.r(a),t.d(a,"update",(function(){return I})),t("d3b7"),t("e260"),t("e6cf"),t("cca6"),t("a79d");var i=t("a026"),o=(t("5c0b"),t("2877")),r=Object(o.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"h-full font-sans",attrs:{id:"app"}},[t("router-view",{key:"index"===e.$route.name?"intro":"content"})],1)}),[],!1,null,null,null).exports,s=(t("78a7"),t("8c4f")),c=function(){return Promise.all([t.e("chunk-67fabd50"),t.e("chunk-bb7b04b8")]).then(t.bind(null,"3041"))},h=function(){return t.e("chunk-56521f0e").then(t.bind(null,"abb7"))},l={name:"d3",path:"/d3",component:c,meta:{title:"D3"},children:[{path:"/d3/intro",component:function(){return Promise.all([t.e("ImageSlider"),t.e("chunk-2d0e1782")]).then(t.bind(null,"7b23"))},meta:{title:"What is D3?",readme:"# What is D3?\n\nElijah Meeks wrote a great article titled [D3 is not a Data Visualization Library](https://medium.com/@Elijah_Meeks/d3-is-not-a-data-visualization-library-67ba549e8520), and the way he described D3 is exactly right.\n\nD3 is like a utility library, filled with useful tools that, when used together, allow you to create some amazing things.\n\nYou can split D3 up into 5 main parts:\n\n1. Visualization\n2. Animation\n3. Analysis\n4. Data Utilities\n5. DOM Utilities\n\nWhen using D3 by itself, things like animation and DOM transformation are handled by D3, but when you have something like Vue, you can leverage it's reactive nature to exclude this part of D3 all together.\n\nThe parts we do care about:\n\n## Data Utilities\n\nThis is how we mold raw data into objects that can be fed into Vue\n\n## Visualization\n\nThe bread and butter. Think of these as ways to transform your data into meaningful visuals.\n"}},{path:"/d3/transforming-data",component:h,meta:{title:"Transforming Data",readme:"# Transforming Data\n\nWhen working with data, we tend to reorganize it to fit our needs depending on the use case.\n\nThis is why things like `map` or `reduce` are used so much. We simply change the data to how we want.\n\n## D3 vs Native\n\nAlot of these methods are built into javascript by default.\n\nWe don't _need_ to use D3 for this functionality, we could even use things like `lodash` in order to create the data structures we need.\n\nHowever, just like lodash, D3 offers some additional utilities to transform data. Some of these include\n\n- Bisecting (Binary Search)\n- Handling null or undefined data\n- CSV Loading / Formatting\n- Visual Data for Layouts\n- Nesting\n\nThere's alot more, but the main point is that you can use `D3` to transform your data, while using `Vue` to _display_ that data.\n\n## Playing with Data\n\nSo what could we find out from the google play store?\n\nIncluded is a sample dataset of 9,365 apps from the play store. Each item has the following properties\n\n```typescript\ninterface PlaystoreItem {\n  'Android Ver': string\n  'Content Rating': string\n  'Current Ver': string\n  'Last Updated': string\n  App: string\n  Category: string\n  Genres: string\n  Installs: string\n  Price: string\n  Rating: string\n  Reviews: string\n  Size: string\n  Type: string\n}\n```\n\nSince we have a habit of grouping and ordering things based on a level of importance, we can split this huge list up into groups to find out information using `d3.nest`\n\n### Nest\n\nThe nest method returns an object containing various grouping methods that can organize and rearrange your dataset.\n\nLet's create a nest object in the console\n\n```javascript\nmyNest = d3.nest()\n// {object: ƒ, map: ƒ, entries: ƒ, key: ƒ, sortKeys: ƒ, …}\n```\n\nLet's think about how we might want to order and group these apps...\n\nWe could split up the collection by the `Category`. In this case we use the `key` method that `myNest` provides. We pass a function that will return the _key_ value these groups will be placed in\n\n```javascript\nmyNest.key(item => item.Category)\n// {object: ƒ, map: ƒ, entries: ƒ, key: ƒ, sortKeys: ƒ, …}\n```\n\n`myNest` doesn't look any different, however the methods have changed.\n\nWhat happens if we apply this dataset to one of these methods?\n\n```javascript\nmyNest.object(dataset)\n```\n\nYou should see a collection of items, containing each app that matches the criteria.\n\nWhat if you want to nest even further?\n\nLet's group these apps again, this time by the amount of installs\n\n```javascript\nmyNest.key(v => v.Installs)\n// {object: ƒ, map: ƒ, entries: ƒ, key: ƒ, sortKeys: ƒ, …}\n```\n\nKeep in mind we have already applied a key, so we should get a collection of apps grouped by category, then by the install amount\n\n```javascript\nmyNest.object(dataset)\n```\n\nWe can keep applying more `key` methods, and actually create a `hierarchy` of importance.\n\nLet's see how many installs there are for free items compared to paid, shall we?\n\n```javascript\nmyNest.key(v => v.Type).object(dataset)\n```\n\nTwo rules of thumb when doing this\n\n1. Order matters\n2. You can't revert\n\nIf you have nested these keys and want to reorganize the data, you must start over.\n\nWhat's nice about how D3 returns these values, is that it returns objects and methods. The dataset is out of the picture.\n\nThis means we don't have to calculate anything expensive by reordering over and over. This only happens when we call a method that nest provides.\n\n#### Customizing keys\n\nIn the above examples, we pass in a function that returns the value of an item property. Instead, we could modify the return value to group other similar items together.\n\nLet's group our collection based on their rating\n\n```javascript\nmyNest = d3\n  .nest()\n  .key(v => v.Rating)\n  .object(dataset)\n```\n\nWe can see that the ratings include a decimal point. Well, what if we wanted to group them by the whole number?\n\n```javascript\nmyNest = d3\n  .nest()\n  .key(v => Math.floor(parseFloat(v.Rating)))\n  .object(dataset)\n```\n\nMuch better :)\n"}},{path:"/d3/hierarchy",component:h,meta:{title:"D3.hierarchy",readme:"# D3.Hierarchy\n\nWhen working with a unidirected hierarchy, you can get other useful information.\n\nThis essentially _wraps_ a new object around each one of your nodes, allowing you to add properties to each one without modifying the original data.\n\nA Hierarchy needs data with a recursive structure in order to find each node. Nest works well with this as it generates a hierarchy structure for us using the `entries` method.\n\n```javascript\n// Make a nest object\nnester = d3.nest()\n\n// Add some keys\nnester.key(item => item['Category'])\nnester.key(v => v['Content Rating'])\nnester.key(item => item['Price'])\n\n// Using the entries method\nnester.entries(dataset)\n```\n\nOne main rule is that we must have a root node. We can do this by applying `entries` to a predefined root object.\n\n```javascript\ntree = {\n  key: 'root',\n  values: nester.entries(dataset)\n}\n```\n\nWe can now create a hierarchy object like magic!\n\n```javascript\nh = d3.hierarchy(tree, v => v.values)\n```\n\nBy comparing the entries array to the hierarchy, you will see a resemblance.\n\nThe Hierarchy object introduces some properties by default, `depth`, `height`,`children` and `parent`.\n\nOne important aspect is the introduction of `nodes` and `links`\n\n### Nodes\n\nEach descendant is considered a `node`, and there are two different types.\n\n#### Leaves\n\nA `Leaf` is a node that does not have any children. The data within these nodes is an item of the dataset.\n\n```javascript\nh.leaves()\n```\n\n#### Branches\n\nThe opposite of a `leaf` node\n\n### Links\n\nLinks connect one node to another, leaf or not\n\n```javascript\nh.links()\n```\n\n## Summarizing\n\nBy default, any sort of hierarchical structure can be summarized by count, being that each `node` has no value associated with it.\n\n```javascript\nh.count()\n```\n\nHey look, now we have a value property on each node!\n\nHowever, if each node can represent other values based on your collection, you can summarize any quantitative property.\n\nLike maybe, finding the amount of reviews for each section?\n\n```javascript\nh.sum(v => v.Reviews)\n```\n\nSummarizing hierarchical information is essential in visualizing the value of each group in a relation to one another.\n\n## Sorting\n\nGiven that we organize things by order of importance, it makes sense to be able to sort each group of information by the value we give it.\n\n```javascript\nh.sort((a, b) => a.value - b.value)\n```\n\n## And More\n\nD3.hierarchy also has other useful methods such as `descendants`, `ancestors`, `path`, etc..\n\nAnd the cool part is that they are available on every node, on any level\n\n```javascript\nh.children[2].children[2].links()\n\nh.children[2].children[0].descendants()\n\nh.children[2].children[3].leaves()\n\nh.children[4].children[3].path(h.children[1].children[1])\n```\n"}},{path:"/d3/scales",component:function(){return t.e("chunk-7417bc98").then(t.bind(null,"e1dd"))},meta:{title:"Scales",readme:'# Scales\n\nThese are fundamental to visually representing information.\n\nAs stated in the docs:\n\n> Although most often used for position-encoding quantitative data, such as mapping a measurement in meters to a position in pixels for dots in a scatterplot, scales can represent virtually any visual encoding, such as diverging colors, stroke widths, or symbol size. Scales can also be used with virtually any type of data, such as named categorical data or discrete data that requires sensible breaks.\n\nA simple `Date` scale can be created as an object, just like `nest`\n\n```javascript\ndateScale = d3.scaleTime();\n```\n\n### Domains and Ranges\n\nIn order to map the data values to visual variables such as position, we use `domains` and `ranges`.\n\n#### Domain\n\n```javascript\n// The extent of data\ndateScale.domain([new Date("9/2/1985"), Date.now()]);\n\ndateScale(new Date("9/2/2014"));\n// 0.8557775151045773\n```\n\nBy default, this scale has a range of `[0,1]`\n\nWe can change this to values in pixels to represent visual values\n\n```javascript\ndateScale.range([0, window.innerWidth]);\n\ndateScale(new Date("9/2/2014"));\n// 1643.0928290007885\n```\n\nNow when we pass in a date, we will have a matching value for positioning. 🎉\n\nThink of `D`ata for `Domain` to avoid mixing them up.\n\n### Values to Visual Dimensions\n\nAs stated in the [Semiology of Graphics](http://localhost:8080/#/theory/variables), scales can represent the visual variables of each item in a collection.\n\nLet\'s take for example a `dataset` of emails within 2 years time. We could use a linear scale to map the value of time to color.\n\n```javascript\ndateScale = d3.scaleLinear();\n\n// Apply the domain\ndateScale.domain([Date.parse("1/1/2015"), Date.parse("12/31/2017")]);\n\n// Apply a range of colors\ndateScale.range(["red", "green"]);\n\ndateScale(Date.parse("10/12/2016"));\n// "rgb(104, 76, 0)"\n```\n\nScales also has a useful `tick` method to generate multiple values\n\n```javascript\ndateScale.ticks(10);\n// (9) [1430000000000, 1440000000000, ...\n\ndateScale.ticks(10).map(t => dateScale(t));\n// (9) ["rgb(228, 13, 0)", "rgb(201, 27, 0)",\n```\n\nThis is only a small section of what is available regarding scales\n\nThey each have their own strengths, and can represent certain values better than others.\n'}}]},d="# Making a Component\n\nWe will be writing a very basic Vue SFC (Single File Component) and wire it to use these core features.\n\n## Create the file\n\nFirst, let's create the file.\n\nClick open to navigate to our directory, and create file called `MyComponent.vue`\n\n## Basic Structure\n\nVue components consist of 3 main section blocks:\n\n1. Template\n2. Script\n3. Style\n\nNot all blocks are needed. In this example, we'll exclude the style block.\n\n```html\n<template>\n  <div>\n    Hello!\n  </div>\n</template>\n\n<script>\n  export default {};\n<\/script>\n```\n\n## Importing\n\nComponents are used by _composing_ them with others. We can create global references to components to use, or we can import them when we need to.\n\nLet's import our component into the container on the right.\n\nClick the open button so we can check out the file in our editor.\n\n### Component Container\n\n```javascript\n<template>\n  <div class=\"component-container\">\n    <my-component />\n  </div>\n</template>\n\n<script>\nimport MyComponent from './MyComponent.vue'\nexport default {\n  components: {\n    MyComponent\n  }\n}\n<\/script>\n```\n\nIf done correctly, you will see the `Hello!` to the right.\n",u='# Reactivity\n\nUser Interfaces for the most part, visually displays data objects.\n\nThey are the visual representation of structured information.\n\nWhen you work with state management, the visual representation updates for you automatically. This means you don\'t have to put in extra work after changing the data to re-render it visually.\n\n## Adding Reactivity\n\nLet\'s add on to the component we just created, `MyComponent.vue`\n\nWe will make a simple calculator that adds two numbers.\n\n```html\n<template>\n  <div>\n    <input v-model.number="a" />\n    <input v-model.number="b" />\n    <h2>The sum is {{ a + b }}</h2>\n  </div>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      a: 2,\n      b: 3\n    })\n  }\n<\/script>\n```\n\nWe are simply changing the value of our data object using `v-model`. Vue will detect this change in values, and automatically render it.\n\n### Computed Props\n\nThere are many use cases for these, but the idea behind this is pretty cool.\nYou can create an object based on multiple values being observed.\n\nLet\'s do this with our current properties\n\n```html\n<template>\n  <div>\n    <input v-model.number="a" />\n    <input v-model.number="b" />\n    <h2>The sum is {{ c }}</h2>\n  </div>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      a: 2,\n      b: 3\n    }),\n    computed: {\n      c() {\n        return this.a + this.b\n      }\n    }\n  }\n<\/script>\n```\n\nThis means that whenever `a` or `b` changes in value, the `c` property will automatically update. And it will _only_ update when it\'s called upon.\n\n### Watchers\n\nIn some cases, computed properties aren\'t the best option. they are cached, and not observed internally. This is where `watch` comes in.\n\nLet\'s add a `reduced` property to our data object.\n\nWhen `c` changes, we will set `reduced` to be the same value, and then continuously subtract until it\'s 0\n\n```html\n<template>\n  <div>\n    <input v-model.number="a" />\n    <input v-model.number="b" />\n    <h2>The sum is {{ c }}</h2>\n    <h4>Reduced {{ reduced }}</h4>\n  </div>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      a: 2,\n      b: 3,\n      reduced: 0\n    }),\n    computed: {\n      c() {\n        return this.a + this.b\n      }\n    },\n    watch: {\n      /**\n       * When c changes, set reduced\n       * to the same number\n       * Then start subtracting\n       */\n      c(val) {\n        this.reduced = val\n        this.subtract()\n      }\n    },\n    methods: {\n      /**\n       * will continuously subtract\n       * from reduced until it\'s 0\n       */\n      subtract() {\n        this.reduced -= 0.1\n        if (this.reduced > 0.001) {\n          requestAnimationFrame(this.subtract)\n        } else {\n          this.reduced = 0\n        }\n      }\n    }\n  }\n<\/script>\n```\n',p={MakingComponent:function(){return t.e("chunk-2d20ec5c").then(t.bind(null,"b190"))},Reactivity:function(){return t.e("chunk-be6f7732").then(t.bind(null,"85f0"))},Rendering:function(){return t.e("chunk-2d0c7ac4").then(t.bind(null,"522c"))},Interaction:function(){return t.e("chunk-20a270f4").then(t.bind(null,"b2d5"))}},m={name:"vue",path:"/vue",redirect:"/vue/intro",component:c,meta:{title:"Vue"},children:[{path:"/vue/intro",component:function(){return Promise.all([t.e("ImageSlider"),t.e("chunk-2d229248")]).then(t.bind(null,"dbd8"))},meta:{title:"What is Vue?",readme:"# What is Vue\n\nVue is a progressive framework for building **user interfaces**. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.\n\n## Why use it\n\nThere's nothing wrong with using another framework if it can do the same job that Vue helps with.\n\nHowever, some parts of Vue compliment D3 and it's usage extremely well.\n\n### Template syntax\n\nVue components have a template that serves as the markup of the component instance.\n\nIn most cases, a simple div element is used. However, you can do the same thing with a SVG!\n\nAbility to construct an svg element instead.\n\nNestable components\n\n### Reactivity\n\nVue will observe, and render information provided within objects. If at any time the values change, Vue handles it for you.\n"}},{path:"/vue/code/single-file-component",component:function(){return t.e("chunk-2d0c8dc6").then(t.bind(null,"574b"))},meta:{title:"Making a Component",readme:d}},{path:"/vue/code/single-file-component/finished",component:p.MakingComponent,meta:{readme:d}},{path:"/vue/reactivity",component:function(){return t.e("chunk-16790762").then(t.bind(null,"e0a9"))},meta:{title:"Reactivity",readme:u}},{path:"/vue/reactivity/finished",component:p.Reactivity,meta:{readme:u}}]},f='# SVG & Shapes\n\nOne of `D3`\'s greatest strengths is it\'s ability to generate `SVG` content.\n\n## What is a SVG?\n\n`SVG` stands for `Scalable Vector Graphics` Meaning that the image is simply made out of _instructions_ for the computer to render.\n\nLogos, icons, and others are `vector` so that they can be rendered at any size while retaining visual quality.\n\n### Just like DOM Elements\n\nSVG\'s are made out of multiple elements of objects or groups, just like the DOM\n\nMany CSS rules can be used, However different rules apply for certain elements.\n\nThis is awesome as it meshes with `Vue`\'s template syntax perfectly, as well as being able to nest components as additional SVG elements.\n\nLet\'s setup our component to have a SVG element\n\n```html\n<template>\n  <svg width="100%" height="100%">\n    \x3c!-- Content --\x3e\n  </svg>\n</template>\n```\n\n### The `circle` element\n\nA circle is just what it says. There are 3 main attributes to a circle, `cx`, `cy`, and `r`\n\nThese are used for the positioning and size of the circle to render.\n\n```html\n<template>\n  <svg width="100%" height="100%">\n    <circle r="10" cx="200" cy="500" />\n  </svg>\n</template>\n```\n\nLet\'s begin by creating an array of points in our `data` object\n\n```javascript\ndata: () => ({\n  points: [\n    {\n      x: 200,\n      y: 500\n    }\n  ]\n})\n```\n\nTo render these, we will use `v-for` to iterate through each point, using circles to display them.\n\n```html\n\x3c!-- Circles --\x3e\n<circle\n  v-for="(item, index) in points"\n  :key="index"\n  :cx="item.x"\n  :cy="item.y"\n  r="5"\n/>\n```\n\nLet\'s add some interactivity to this component. We will create points by clicking within the svg, and then use circles to render them.\n\nWe can also add in a right click to reset the entire array\n\nWe\'ll add to the template\n\n```html\n<svg\n  width="100%"\n  height="100%"\n  @click="addPoint"\n  @contextmenu.prevent="points = []"\n>\n  \x3c!-- Content --\x3e\n</svg>\n```\n\nThen create a method for clicking\n\n```javascript\nmethods: {\n  addPoint(mouseEvent) {\n    const {\n      layerX: x,\n      layerY: y\n    } = mouseEvent\n\n    this.points.push({x,y})\n  }\n}\n```\n\nIf done correctly, you will be able to add circles to the screen by left clicking, and clearing them by right clicking.\n\n### The `path` element\n\nA path element takes in a string of drawing\ninstructions. Any shape can be created with a path. This attribute is called `d`\n\nThis can be used to draw `links` which are simply lines connecting nodes together.\n\nIn this case, we can create a line from the point array!\n\nTo do this, we will use `d3.line`\n\n### d3.line\n\nAn instance of a line, is a generator just like `scale`. They are methods that return values based on the dataset you provide.\n\n```javascript\nline = d3.line()\nline(dataset)\n```\n\nWhen using `d3.line` we need to provide methods to retrieve positioning values.\n\nWe pass in methods to retrieve the x and y values based on a single item\n\n```javascript\nline = d3.line()\nline.x(v => v.x)\nline.y(v => v.y)\n\nline(dataset)\n```\n\nBy using `computed properties`, we can create a line generator instance to use on our template\n\n```javascript\ncomputed: {\n  lineGen() {\n    return d3.line()\n    .x(v => v.x)\n    .y(v => v.y)\n  }\n}\n```\n\nWhat this will do, is provide a string to be passed as an attribute to a path element, therefore rendering the shape\n\n```html\n<path stroke="white" stroke-width="5" :d="lineGen(points)" />\n```\n\nCool, now we can draw a line! ✨ Magic!\n\nbut `d3.line` has some other useful options,such as applying a curve.\n\nWe can apply this by simply adding an extra option to our generator\n\n```javascript\ncomputed: {\n  lineGen() {\n    return d3.line()\n    .x(v => v.x)\n    .y(v => v.y)\n    .curve(d3.curveNatural)\n  }\n}\n```\n\nThere are many useful situations to use `d3.shape`, In our case they can display the connection between groups of nodes, and the nodes themselves.\n',y='# Layouts\n\n`D3` provides multiple layouts for use with displaying hierarchies.\n\nThese include `Cluster`, `Tree`, `Treemap`, `Partition`, and `Pack`\n\nTreemap and Pack both have a nested display, meaning they do not show links connecting nodes. Instead, they represent the hierarchy by fitting their descendants within the same space.\n\nWe can use these to create a number of layouts like the ones shown in the [examples](/#/intro/examples)\n\nThey expect a hierarchy instance to be passed, and they simply assign more properties to each node for position and size.\n\n## Full Reactivity\n\nBecause of the way layouts are applied, we have to be careful about where we place our properties.\n\nFor example, when we run a layout, it mutates the hierarchy object by assigning various positioning values to each node.\n\nTherefore the hierarchy object should be observed as as a data property, and not a computed one.\n\n## The setup\n\nLet\'s visualize a dataset of the `world population` in a `circle packing` layout.\n\nWe\'ll add a SVG to our template, and make it fill the entire area\n\n```html\n<svg width="100%" height="100%">\n  \x3c!-- Content Here --\x3e\n</svg>\n```\n\n---\n\n### The Data\n\nWe need to assign some properties to our data object\n\nIn our script, let\'s setup the basic structure.\n\n```javascript\ndata: () => ({\n  width: 100,\n  height: 100,\n  padding: 2,\n  h: d3.hierarchy({}),\n  groupOrder: ["region", "subregion"],\n  dataset: []\n});\n```\n\n---\n\n### Methods\n\nEach layout needs some type of size in order to perform it\'s calculations for scaling and positioning.\n\nBy adding a resize method, we can assign the component\'s size to the `width` and `height` values\n\n```javascript\nmethods: {\n    updateSize() {\n      const {\n        width,\n        height\n      } = this.$el.getBoundingClientRect()\n      this.width = width\n      this.height = height\n    }\n}\n```\n\n---\n\n### Mounting\n\nWhen this component is mounted, we simply load our dataset in, as well as initialize our width and height\n\n```javascript\nasync mounted() {\n  // 1. Assign Sizes\n  this.updateSize()\n\n  // 2. Load the raw data\n  const data = await d3.json(\'/datasets/populations.json\')\n\n  // 3. Assign data to our dataset object\n  this.dataset = Object.freeze(data)\n}\n```\n\n---\n\n### Computed\n\nWe need a layout that updates whenever the dimensions or padding change.\n\n```javascript\n/**\n * if width, height or padding changes\n * this will change, triggering our watcher\n * to apply changes to our nodes\n * @returns {d3.PackLayout<population.Country>}\n */\nlayout() {\n  return d3.pack()\n    .size([this.width, this.height])\n    .padding(this.padding)\n}\n```\n\nNext, we can create a nester method that always reflects the current grouping order.\n\n```javascript\n/**\n * if the group order is changed\n * this will change, triggering the\n * hierarchy to be recreated\n * @returns {d3.Nest<population.Country>}\n */\nnester() {\n  const n = d3.nest()\n\n  this.groupOrder.forEach(v => {\n    n.key(node => node[v])\n  })\n\n  return n\n}\n```\n\nLastly, we will create another object that converts our raw data into a nested object that can be applied to our hierarchy.\n\n```javascript\n/**\n * If the nester method, or dataset changes\n * will generate a root node\n */\nnestedData() {\n  return {\n    key:    \'root\',\n    values: this.nester.entries(this.dataset)\n  }\n}\n```\n\n---\n\n### Watchers\n\nWe need to observe some of these computed properties in order to recalculate everything\n\nWhen the layout property changes, we can apply it to our hierarchy.\n\n```javascript\n/**\n * When layout method changes,\n * apply to the hierarchy\n * @type {Vue.WatchHandler<d3.PackLayout<population.Country>}\n */\nlayout() {\n  this.layout(this.h)\n}\n```\n\n---\n\nFinally, when `nestedData` changes, we need to recreate our hierarchy.\n\nWe must also summarize and sort the values before we run the layout on it, and then observe the hierarchy _after_ it\'s been mutated by the layout.\n\n```javascript\n/**\n * When our nestedData changes,\n * updates h, and applys a new layout\n */\nnestedData(val) {\n  // * Add Hierarchy to nested data\n  const h = d3.hierarchy(val, v => v.values)\n\n  // ! Calculate Totals and sort\n  h.sum(v => v.value)\n  h.sort((a, b) => d3.ascending(a.value, b.value))\n\n  /**\n   * We must assign properties to hierarchy\n   * before we pass it on to vue, so that they are observed\n   */\n  this.layout(h)\n\n  /** Finally pass it to Vue for observing */\n  this.h = h\n}\n```\n\n> At this point, everything is observed, and will calculate things in an order that just works.\n>\n> Now we just need to render it.\n\n---\n\n### Visualizing the layout\n\nIn our SVG, let\'s add a circle for each descendant. We will bind `x`, `y`, and `r` for size and positioning, as well as a tooltip to show the key and value of each node.\n\n```html\n\x3c!-- Render every descendant of our hierarchy --\x3e\n<circle\n  v-for="(item, index) in h.descendants()"\n  :key="index"\n  :r="item.r"\n  :cx="item.x"\n  :cy="item.y"\n>\n  \x3c!-- Tooltip --\x3e\n  <title>\n    {{ item.data.key }}: {{ item.value }}\n  </title>\n</circle>\n```\n\nWe can now change the width, height, padding of the layout,\nas well as the raw data and the grouping order, and Vue will automatically render the changes.\n\n---\n\nJust for kicks, we can animate everything\n\n```scss\ncircle {\n  transition: all 300ms ease;\n}\n```\n\nKeep in mind that even though we are using SVG elements, this concept can also be used in regular dom content by applying a dynamic style to each node.\n\n---\n\n### Rendering Links\n\nIn the `Pack` layout, we do not display links, because the hierarchy is displayed in a nested fashion.\n\nLet\'s use a `Cluster` layout to visualize our hierarchy.\n\nSince the logic involved for reactive layouts is exactly the same, we only need to change the layout we are currently using!\n\nFirst, let\'s set the radius of each circle to be 5px, since the new layout will not include that value:\n\n```html\n\x3c!-- Render every descendant of our hierarchy --\x3e\n<circle\n  v-for="(item, index) in h.descendants()"\n  :key="index"\n  r="5"\n  :cx="item.x"\n  :cy="item.y"\n>\n  \x3c!-- Tooltip --\x3e\n  <title>\n    {{ item.data.key }}: {{ item.value }}\n  </title>\n</circle>\n```\n\nNext, we\'ll replace the `Pack` layout, with a `Cluster`, and remove the padding property\n\n```javascript\n/**\n * if width, height or padding changes\n * this will change, triggering our watcher\n * to apply changes to our nodes\n * @returns {d3.PackLayout<population.Country>}\n */\nlayout() {\n  return d3.cluster()\n    .size([this.width, this.height])\n}\n```\n\nWe should now see our circles resemble a tree like display! This is because the `x` and `y` properties are both used in `Pack` and `Cluster` layouts.\n\nWe need to visualize the links, so let\'s create a line generator as a computed property.\n\n```javascript\n/**\n * Creates a path string out of an array of points.\n * @returns {d3.Path}\n */\nlineGen() {\n  return d3.line()\n    .x(node => node.x)\n    .y(node => node.y)\n}\n```\n\nIn the template, we will create a path for each link in our hierarchy by calling our line generator.\n\n```html\n\x3c!-- Render every link --\x3e\n<path\n  v-for="(link, index) in h.links()"\n  :key="`link${index}`"\n  :d="lineGen([link.source, link.target])"\n/>\n```\n\nWe should now see a **dendrogram**, or in other words, a `Cluster`! 🎉\n',g='# Radial Layouts\n\nBy applying simple trigonometry, we can visualize the layouts in a circular fashion.\n\n## The Math\n\nIn order get the x and y values of a rotation, we need the angle, as well as the radius.\n\nIn degrees, a full circle is 360. However, we will be working with `radians` to determine the angle.\n\nIn a full circle, the amount of `radians` is exactly `2PI`, or `6.283185307179586...`\n\nAlso, when displaying our circular layouts, the positioning needs to be centered, instead of top left\n\nLet\'s add a center property, as well as a radius property in our computed object.\n\n```javascript\n/**\n * The radius of our layout\n * @return {number}\n */\nradius() {\n  return Math.min(this.width, this.height) * 0.5\n},\n\n/**\n * The center point of our content\n * @returns {{x: number, y: number}}\n */\ncenter() {\n  return {\n    x: this.width * 0.5,\n    y: this.height * 0.5\n  }\n}\n```\n\n## Conversion\n\nWe simply need to make the `x` value the angle, and use `y` as the radius.\n\nLet\'s change our layout to generate these values instead:\n\n```javascript\n/**\n * if the radius changes, adjust\n * this will change, triggering our watcher\n * to apply changes to our nodes\n * @returns {d3.ClusterLayout<population.Country>}\n */\nlayout() {\n  return d3.cluster()\n    .size([Math.PI * 2, this.radius])\n},\n```\n\nTo convert this to x and y values, we use `Sine` and `Cosine`\n\nLet\'s write a couple functions that converts a radial point to x and y coordinates\n\n```javascript\n/**\n * The x position of a radial point\n */\ntoX(point) {\n  return Math.cos(point.x) * point.y\n},\n\n/**\n * The y position of a radial point\n */\ntoY(point) {\n  return Math.sin(point.x) * point.y\n}\n```\n\nWe can apply this to our circles in the template by calling each node with the corresponding method, as well as adding the offset to display from the center:\n\n```html\n\x3c!-- Render every descendant of our hierarchy --\x3e\n<circle\n  v-for="(item, index) in h.descendants()"\n  :key="index"\n  r="5"\n  :cx="center.x + toX(item)"\n  :cy="center.y + toY(item)"\n>\n  \x3c!-- Tooltip --\x3e\n  <title>{{ item.data.key }}: {{ item.value }}</title>\n</circle>\n```\n\nNow we just need to apply the same conversion to our line generator.\n\nCurrently we only retrieve the x and y values from each node. Let\'s rewrite it to retrieve the radial positioning as well as adding the offset\n\n```javascript\n/**\n * Creates a path string out of an array of points.\n * @returns {d3.Path}\n */\nlineGen() {\n  return d3.line()\n    .x(node => this.center.x + (Math.cos(node.x) * node.y))\n    .y(node => this.center.y + (Math.sin(node.x) * node.y))\n}\n```\n\nNow we have a nice radial version of our cluster dendrogram! 🎈\n\n### Built in functionality\n\n`D3` does offer radial variants of it\'s generators, such as `lineRadial` or `pointRadial` which do the same job.\n\nHowever, if you have a good understanding of how these are converted, you can take advantage with other approaches.\n',b={Shapes:function(){return Promise.all([t.e("chunk-4b831d0f"),t.e("chunk-084408eb")]).then(t.bind(null,"b914"))},Layouts:function(){return t.e("chunk-697ca00e").then(t.bind(null,"08e4"))},RadialLayouts:function(){return t.e("chunk-5b7ec9d3").then(t.bind(null,"0293"))}},v={name:"vued3",path:"/vue-d3",redirect:"/vue-d3/shapes",component:c,meta:{title:"Vue + D3"},children:[{path:"/vue-d3/shapes",component:function(){return Promise.all([t.e("chunk-4b831d0f"),t.e("chunk-3affc264")]).then(t.bind(null,"b829"))},meta:{title:"SVG & Shapes",readme:f}},{path:"/vue-d3/shapes/finished",component:b.Shapes,meta:{readme:f}},{path:"/vue-d3/layouts",component:function(){return t.e("chunk-2d20ec52").then(t.bind(null,"b17d"))},meta:{title:"Layouts",readme:y}},{path:"/vue-d3/layouts/finished",component:b.Layouts,meta:{readme:y}},{path:"/vue-d3/radial-layouts",component:function(){return t.e("chunk-00d5bec1").then(t.bind(null,"7c95"))},meta:{title:"Radial Layouts",readme:g}},{path:"/vue-d3/radial-layouts/finished",component:b.RadialLayouts,meta:{readme:g}}]},w={name:"intro",path:"/intro",redirect:"/intro/setup",component:c,meta:{title:"Intro"},children:[{path:"/intro/setup",component:function(){return Promise.all([t.e("MarkdownViewer"),t.e("chunk-0dc90800")]).then(t.bind(null,"c356"))},meta:{title:"Setup"}},{path:"/intro/welcome",component:function(){return Promise.all([t.e("ImageSlider"),t.e("chunk-2d0e68f3")]).then(t.bind(null,"98ec"))},meta:{title:"Hello World!",readme:"# Hello Everyone!\n\n> My name is `Jon Snyder`.\n> Let's make some dataviz!\n\n## Why this workshop?\n\nOver the last couple of years, I've developed this somewhat unhealthy obsession with visualizing data.\n\nAs time went by, I started to realize how much UX Laws and dataviz had in common, and it was all I thought about.\n\nI hope to pass on my excitement so that you too can see and explore the possibilities.\n\n## About this Workshop\n\nMy main goal is to get you excited to explore the data around you, and to share some ways of achieving this.\n\nWe will be using `Vue.js` and `D3.js` to provide data manipulation in a reactive environment, and to show how powerful these two concepts are when used together.\n\nWe will start small by going over some features in both libraries, and work our way up to creating some nice visuals.\n\nHierarchical data will be our main focus for visualizing, however you will learn patterns that can be used in other aspects of data visualization.\n\nLet's have some fun with Vue and D3!\n"}},{path:"/intro/examples",component:function(){return Promise.all([t.e("ImageSlider"),t.e("chunk-2d0d5c32")]).then(t.bind(null,"7058"))},meta:{title:"Examples",readme:"# Examples\n\nSo what can we visualize that has meaning?\n\nLet's take a look at some of the layouts D3 provides\n\n## Dendrograms\n\nDendrograms are node-link diagrams that place leaf nodes of the tree at the same depth.\n\nUseful when all the leaves should be at the same level, such as for `hierarchical clustering` or `phylogenetic tree diagrams`.\n\n## Tidy Trees\n\nProduces _tidy_ node-link diagrams of trees using the `Reingold–Tilford “tidy” algorithm`, improved to run in linear time by `Buchheim et al`. Tidy trees are typically more compact than `dendrograms`.\n\n## Radial Variants\n\nIn alot of cases, we can take a linear display, such as dendrograms or tidy trees, and wrap them in a circular fashion.\n\n## Treemaps\n\nWebpack has a nice feature to export out the [stats](https://webpack.js.org/api/stats) of your build\n\nWhen compiling source code with webpack, users can generate a JSON file containing statistics about modules. These statistics can be used to analyze an application's dependency graph as well as to optimize compilation speed.\n\nTreemaps were invented by [Ben Shneiderman](https://en.wikipedia.org/wiki/Ben_Shneiderman), and works as a great way to analyze the proportion of quantity between nodes.\n\nWhen the color and size dimensions are correlated in some way with the tree structure, one can often easily see patterns that would be difficult to spot in other ways, such as if a certain color is particularly relevant. A second advantage of treemaps is that, by construction, they make efficient use of space. As a result, they can legibly display thousands of items on the screen simultaneously.\n\nThis can be incredibly useful for the developer to determine where optimization is needed, such as tree shaking, and bundle sizes.\n\n## Partitions\n\nThe partition layout produces adjacency diagrams: a space-filling variant of a node-link tree diagram. Rather than drawing a link between parent and child in the hierarchy, nodes are drawn as solid areas (either arcs or rectangles), and their placement relative to other nodes reveals their position in the hierarchy. The size of the nodes encodes a quantitative dimension that would be difficult to show in a node-link diagram.\n\n## Circle Packing\n\nEnclosure diagrams use containment (nesting) to represent a hierarchy. The size of the leaf circles encodes a quantitative dimension of the data. The enclosing circles show the approximate cumulative size of each subtree, but due to wasted space there is some distortion; only the leaf nodes can be compared accurately. Although circle packing does not use space as efficiently as a treemap, the “wasted” space more prominently reveals the hierarchical structure.\n"}}]},k={name:"outro",path:"/outro",redirect:"/outro/thanks",component:c,meta:{title:"Outro"},children:[{path:"/outro/resources",component:function(){return Promise.all([t.e("ImageSlider"),t.e("chunk-2d0b5e08")]).then(t.bind(null,"1b89"))},meta:{title:"Questions"}},{path:"/outro/thanks",component:function(){return Promise.all([t.e("ImageSlider"),t.e("chunk-2d0e4a6d")]).then(t.bind(null,"90aa"))},meta:{title:"Thank You!"}}]},x={name:"theory",path:"/theory",redirect:"/theory/intro",component:c,meta:{title:"Visual Theory"},children:[{path:"/theory/intro",component:function(){return Promise.all([t.e("ImageSlider"),t.e("chunk-2d0f005d")]).then(t.bind(null,"9b31"))},meta:{title:"Order from Chaos",readme:"# Order from Chaos\n\nWe as human beings, don't like chaos. The moment our minds are presented with uncertainty, or disconnect, we immediately try to make sense of it.\n\nOur human behavior surrounds this notion that everything must have order.\n\nWe are pattern seekers, and it is simply our way of understanding our environment to the best of our ability.\n\n## Input\n\nWe try to figure out the world by using our senses. This is our `interface`. We take in tons of information and process it at lightning speed.\n\nWe process this data by identifying, and organizing it smaller parts. Then reorganizing, over and over, into something that would have meaning.\n\n### Memory\n\nOur `short-term` memory is where the magic of making sense of things happen.\n\nWhen we see something, new info gets passed into short-term memory while the old info gets passed into long term. This happens faster than our conscious speed of thought to help us make sense as fast as possible before we are consciously aware of it.\n\nThis is known as `Miller's Law`, which states that the average mind can only keep 7 ± 2 items in it's working (short-term) memory.\n\n### Speed\n\nThe [Bandwidth of our senses](https://medium.com/@hasanoviz/visualization-principles-a8c6e46ddc5f) compares the amount of information each of our senses _perceive_ per second.\n\nOur sense of sight gives us the most amount of data to _perceive_ within the shortest amount of time.\n\nKeeping this in mind, it can help us determine what visual displays would have the most impact given the insight that's desired.\n"}},{path:"/theory/gestalt",component:function(){return Promise.all([t.e("ImageSlider"),t.e("chunk-2d0cbe78")]).then(t.bind(null,"4c3f"))},meta:{title:"Gestalt Theory",readme:'# Gestalt Theory\n\nThis principle maintains that when the human mind (perceptual system) forms a percept or "gestalt", the whole has a reality of its own, independent of the parts.\n\nOur brain is capable of generating whole forms, particularly with respect to the visual recognition of global figures instead of just collections of simpler and unrelated elements (points, lines, curves, etc.).\n\nWhen we visually perceive information, our brain helps us by using **shortcuts** to process it as a `whole`, even when parts are missing.\n\nThis is particularly interesting in respect to Design and UX, as most of these principles have become well known laws of UX.\n\n## Structured Design\n\nIt seems apparent that this approach of grouping and categorizing is in alot of what we do, even outside of our visual perception... We order groups of information based on a rating of importance.\n\nWe use this format logically, as well as visually perceiving the world around us.\n\n#### Consistent Behavior\n\nMore patterns emerge as time goes on, giving us more insight to what makes a pleasant experience based on our behavior in visualizing content.\n\nThere is a common theme to this. We seem to quickly perceive everything first, before diving into the details, regardless of the layout. We analyze the design as a whole to determine which parts we should focus on, before actually shifting focus.\n'}},{path:"/theory/grouping",component:function(){return Promise.all([t.e("ImageSlider"),t.e("chunk-2d0b2cc8")]).then(t.bind(null,"263a"))},meta:{title:"Law of Prägnanz",readme:'# Law of Prägnanz\n\nThe fundamental principle of gestalt perception is the law of Prägnanz (in the German language, pithiness), which says that **we tend to order our experience in a manner that is regular, orderly, symmetrical, and simple**.\n\nPrinciples that, hypothetically, allow us to predict the interpretation of sensation, often called `"gestalt laws"`\n\nImplies that the mind understands external stimuli as _whole_ rather than the sum of their parts. The wholes are structured and organized using `grouping laws`.\n\n## Law of Proximity\n\nStates that when an individual perceives an assortment of objects, they perceive objects that are close to each other as forming a group.\n\n## Law of Similarity\n\nStates that elements within an assortment of objects are perceptually grouped together if they are similar to each other.\n\n## Law of Closure\n\nStates that individuals perceive objects such as shapes, letters, pictures, etc., as being whole when they are not complete. Specifically, when parts of a whole picture are missing, our perception fills in the visual gap.\n\n## Law of Symmetry\n\nStates that the mind perceives objects as being symmetrical and forming around a center point. It is perceptually pleasing to divide objects into an even number of symmetrical parts.\n\n## Law of Common Fate\n\nStates that objects are perceived as lines that move along the smoothest path. Experiments using the visual sensory modality found that movement of elements of an object produce paths that individuals perceive that the objects are on.\n\n## Law of Continuity\n\nStates that elements of objects tend to be grouped together, and therefore integrated into perceptual wholes if they are aligned within an object. In cases where there is an intersection between objects, individuals tend to perceive the two objects as two single uninterrupted entities.\n'}},{path:"/theory/variables",component:function(){return Promise.all([t.e("ImageSlider"),t.e("chunk-2d0a349e")]).then(t.bind(null,"0217"))},meta:{title:"Visual Variables",readme:"# Visual Variables\n\nWhen we process data visually, we use a collection of different stimuli to inspect and analyze this information.\n\n> [Jacques Bertin](https://medium.com/@karlsluis/before-tufte-there-was-bertin-63af71ceaa62) was a French cartographer and theorist, known from his book Semiologie Graphique (Semiology of Graphics), published in 1967. This monumental work, based on his experience as a cartographer and geographer, represents the first and widest intent to provide a theoretical foundation to Information Visualization. - Wikipedia\n\nDepending on the type of information, these variables play a major role in how we retain data in certain formats.\n\n## Dimensions\n\n1. Size\n2. Value\n3. Texture\n4. Color\n5. Orientation\n6. Shape\n\n## Comparison\n\n1. Association\n2. Selection\n3. Order\n4. Quantity\n"}}]},j=t("c87a");i.default.use(s.a);var T=new s.a({routes:[{name:"index",path:"/",component:function(){return t.e("HomeView").then(t.bind(null,"bb51"))}},w,x,m,l,v,k,{path:"/xp",name:"Experiments",meta:{title:"Experiments"},component:function(){return t.e("chunk-c1547a56").then(t.bind(null,"55eb"))},children:[{path:"/xp/edgebundling",components:{default:j.a,controls:function(){return Promise.all([t.e("chunk-4b831d0f"),t.e("chunk-2d0bddf6")]).then(t.bind(null,"2e9f"))}},meta:{title:"Edge Bundling"}},{path:"/xp/f1",components:{default:function(){return Promise.all([t.e("chunk-67fabd50"),t.e("chunk-3c63c192")]).then(t.bind(null,"5d28"))},controls:function(){return Promise.all([t.e("chunk-4b831d0f"),t.e("chunk-2d0bddf6")]).then(t.bind(null,"2e9f"))}},meta:{title:"Formula One"}},{path:"/xp/misc",components:{default:function(){return t.e("chunk-79485d7c").then(t.bind(null,"f5d5"))},controls:function(){return Promise.all([t.e("chunk-4b831d0f"),t.e("chunk-2d0bddf6")]).then(t.bind(null,"2e9f"))}},meta:{title:"Miscellaneous"}}]},{path:"/404",redirect:"/"},{path:"*",redirect:"/"}]}),S=(t("7db0"),t("13d5"),t("2f62")),W=t("ea72"),V=t.n(W),C=t("0f5c"),D=t.n(C),I=function(e,n){var t=n.path,a=n.value;D()(e,t,a)},z={state:function(){return{edgeBundling:{angle:270}}},mutations:a,namespaced:!0};i.default.use(S.a);var L=new S.a.Store({state:{readme:null,emails:[]},modules:{controls:z},mutations:{setReadme:function(e,n){e.readme=n}},actions:{setReadme:function(e,n){(0,e.commit)("setReadme",n)}},getters:{wordScores:function(e){return e.readme?V()(e.readme.toLowerCase()).reduce((function(e,n){var t=e.find((function(e){return e.word===n}));return t?t.value++:e.push({word:n,value:1}),e}),[]).sort((function(e,n){return n.value-e.value})):[]}},strict:!1}),P=t("a7fe"),E=t.n(P),A=t("bc3a"),M=t.n(A),R=t("252c");t("6eb0"),t("a997"),i.default.component("OpenButton",(function(){return t.e("chunk-2d0d603d").then(t.bind(null,"716c"))})),Object.assign(window,{dev:{d3:t("5698"),store:L,Vue:i.default}}),i.default.use(R.a),i.default.use(E.a,M.a),i.default.config.productionTip=!1,new i.default({router:T,store:L,render:function(e){return e(r)}}).$mount("#app")},"5c0b":function(e,n,t){"use strict";t("9c0c")},"78a7":function(e,n,t){},"9c0c":function(e,n,t){},a997:function(e,n,t){t("27d6").load({google:{families:["Roboto","Segoe UI","Segoe UI Emoji","Amatica SC"]}})},c87a:function(e,n,t){"use strict";t.d(n,"d",(function(){return a})),t.d(n,"b",(function(){return i})),t.d(n,"c",(function(){return o})),t.d(n,"a",(function(){return r})),t("d3b7");var a=function(){return t.e("ReportTree").then(t.bind(null,"93d6"))},i=function(){return Promise.all([t.e("chunk-67fabd50"),t.e("ForceDemo")]).then(t.bind(null,"86ec"))},o=function(){return t.e("ImageSlider").then(t.bind(null,"dd33"))},r=function(){return Promise.all([t.e("chunk-67fabd50"),t.e("EnronEmails")]).then(t.bind(null,"0f19"))}}});